import telebot
import logging  # –º–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –ª–æ–≥–æ–≤
# –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ config-—Ñ–∞–π–ª–∞
from validators import *  # –º–æ–¥—É–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
from yandex_gpt import ask_gpt  # –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GPT
# –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ config —Ñ–∞–π–ª–∞
from config import LOGS, COUNT_LAST_MSG, BOT_TOKEN_PATH
# –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database —Ñ–∞–π–ª–∞
from database import create_database, add_message, select_n_last_messages, count_all_blocks, insert_row, count_all_symbol, insert_row_tts
from speechkit import speech_to_text, text_to_speech


bot = telebot.TeleBot(BOT_TOKEN_PATH)
create_database()


# –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
logging.basicConfig(filename=LOGS, level=logging.ERROR, format="%(asctime)s FILE: %(filename)s IN: %(funcName)s MESSAGE: %(message)s", filemode="w")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É!")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /help
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—â–µ–Ω–∏—é, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /debug - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏
@bot.message_handler(commands=['debug'])
def debug(message):
    try:
        with open("logs.txt", "r") as f:
            log_contents = f.read()
            if log_contents:
                bot.send_document(message.chat.id, open("logs.txt", "rb"))
            else:
                bot.send_message(message.chat.id, "–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –ø—É—Å—Ç–æ–π.")
    except FileNotFoundError as e:
        bot.send_message(message.chat.id, "–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /debug.")
        logging.error(e)


@bot.message_handler(commands=['info'])  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
def info(message):
    bot.send_message(message.chat.id,
                     "–ë–æ—Ç-GPT ‚Äî —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π YandexGPT-Lite, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                     "–æ–±—â–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∏ —á–µ—Ä–µ–∑ –∞—É–¥–∏–æ.\n"               
                     "\n–ñ–µ–ª–∞—é –í–∞–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!")


@bot.message_handler(commands=['command'])  # –≤—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def say_start(message):
    bot.send_message(message.chat.id, " –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üìã:\n"
                                      "\n/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"
                                      "\n/help - –ø–æ–º–æ—â—å"
                                      "\n/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
                                      "\n/command - –∫–æ–º–∞–Ω–¥—ã"
                                      "\n/debug - —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –±–æ—Ç–∞"
                                      "\n/stt  - –ø—Ä–æ–≤–µ—Ä–∫–∞ stt"
                                      "\n/tts - –ø—Ä–æ–≤–µ—Ä–∫–∞ tts")


@bot.message_handler(commands=['stt'])
def stt_handler(message):
    user_id = message.from_user.id
    bot.send_message(user_id, '–ü—Ä–æ–≤–µ—Ä–∫–∞. –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª!')
    bot.register_next_step_handler(message, stt)


def stt(message):
    user_id = message.from_user.id
    if not message.voice:
        return
    stt_blocks, error_message = is_stt_block_limit(user_id, message)
    if not stt_blocks:
        bot.send_message(user_id, error_message)
        return
    file_id = message.voice.file_id
    file_info = bot.get_file(file_id)
    file = bot.download_file(file_info.file_path)
    status, text = speech_to_text(file)
    if status:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é insert_row() –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è stt_blocks –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        insert_row(user_id, text, 'stt_blocks', stt_blocks)
        bot.send_message(user_id, text, reply_to_message_id=message.id)
    else:
        bot.send_message(user_id, text)


def is_stt_block_limit(user_id: int, message: telebot.types.Message):
    duration = message.voice.duration
    audio_blocks = math.ceil(duration / 15)
    all_blocks = count_all_blocks(user_id)
    if all_blocks is None:
        all_blocks = 0
    all_blocks += audio_blocks

    if duration >= 30:
        msg = "SpeechKit STT —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥"
        bot.send_message(user_id, msg)
        return None, msg

    if all_blocks >= MAX_USER_STT_BLOCKS:
        msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç SpeechKit STT {MAX_USER_STT_BLOCKS}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {all_blocks} –±–ª–æ–∫–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {MAX_USER_STT_BLOCKS - all_blocks}"
        bot.send_message(user_id, msg)
        return None, msg

    # –ü–æ–¥—Å—á–µ—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ STT
    total_stt_blocks = count_all_blocks(user_id)
    max_stt_blocks = MAX_USER_STT_BLOCKS

    if total_stt_blocks is None:
        total_stt_blocks = 0

    if total_stt_blocks < max_stt_blocks:
        total_stt_blocks += 1
    else:
        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."

    return audio_blocks, None


@bot.message_handler(commands=['tts'])
def call_tts_handler(message):
    user_id = message.from_user.id
    bot.send_message(user_id, '–ü—Ä–æ–≤–µ—Ä–∫–∞. –û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —è –µ–≥–æ –æ–∑–≤—É—á–∏–ª!')
    bot.register_next_step_handler(message, tts)


def tts(message):
    user_id = message.from_user.id
    text = message.text
    if message.content_type != 'text':
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return
    tts_symbol, error_message = is_tts_symbol_limit(message, text)
    if not tts_symbol:
        bot.send_message(user_id, error_message)
        return
    insert_row_tts(user_id, text, tts_symbol)
    status, content = text_to_speech(text)
    if status:
        bot.send_voice(user_id, content)
    else:
        bot.send_message(user_id, content)


def is_tts_symbol_limit(user_id, text):
    text_symbols = len(text)
    all_symbols = count_all_symbol(user_id)
    if all_symbols is None:
        all_symbols = 0
    all_symbols += text_symbols
    if all_symbols >= MAX_USER_TTS_SYMBOLS:
        return None, f"–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç SpeechKit TTS {MAX_USER_TTS_SYMBOLS}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {all_symbols} —Å–∏–º–≤–æ–ª–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {MAX_USER_TTS_SYMBOLS - all_symbols}"
    return text_symbols, None


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º
@bot.message_handler(content_types=['voice'])
def handle_voice(message: telebot.types.Message):
    try:
        user_id = message.from_user.id
        status_check_users, error_message = check_number_of_users(user_id)
        if not status_check_users:
            bot.send_message(user_id, error_message)
            return
        #stt_blocks, error_message = is_stt_block_limit(user_id, message.voice.duration)
        stt_blocks, error_message = is_stt_block_limit(user_id, message)
        if error_message:
            bot.send_message(user_id, error_message)
            return
        file_id = message.voice.file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        status_stt, stt_text = speech_to_text(file)
        if not status_stt:
            bot.send_message(user_id, stt_text)
            return
        add_message(user_id=user_id, full_message=[stt_text, 'user', 0, 0, stt_blocks])
        last_messages, total_spent_tokens = select_n_last_messages(user_id, COUNT_LAST_MSG)
        total_gpt_tokens, error_message = is_gpt_token_limit(last_messages, total_spent_tokens)
        if error_message:
            bot.send_message(user_id, error_message)
            return
        status_gpt, answer_gpt, tokens_in_answer = ask_gpt(last_messages)
        if not status_gpt:
            bot.send_message(user_id, answer_gpt)
            return
        total_gpt_tokens += tokens_in_answer
        tts_symbols, error_message = is_tts_symbol_limit(user_id, answer_gpt)
        add_message(user_id=user_id, full_message=[answer_gpt, 'assistant', total_gpt_tokens, tts_symbols, 0])
        if error_message:
            bot.send_message(user_id, error_message)
            return
        status_tts, voice_response = text_to_speech(answer_gpt)
        if status_tts:
            bot.send_voice(user_id, voice_response, reply_to_message_id=message.id)
        else:
            bot.send_message(user_id, answer_gpt, reply_to_message_id=message.id)
    except Exception as e:
        logging.error(e)
        bot.send_message(message.from_user.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        user_id = message.from_user.id

        # –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –µ—â—ë –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π)
        status_check_users, error_message = check_number_of_users(user_id)
        if not status_check_users:
            bot.send_message(user_id, error_message)  # –º–µ—Å—Ç –Ω–µ—Ç =(
            return

        # –ë–î: –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        full_user_message = [message.text, 'user', 0, 0, 0]
        add_message(user_id=user_id, full_message=full_user_message)

        # –í–ê–õ–ò–î–ê–¶–ò–Ø: —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é GPT-—Ç–æ–∫–µ–Ω–æ–≤
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 (COUNT_LAST_MSG) —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        last_messages, total_spent_tokens = select_n_last_messages(user_id, COUNT_LAST_MSG)
        # –ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ + —Ç–æ–∫–µ–Ω–æ–≤ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_gpt_tokens, error_message = is_gpt_token_limit(last_messages, total_spent_tokens)
        if error_message:
            # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            bot.send_message(user_id, error_message)
            return

        # GPT: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        status_gpt, answer_gpt, tokens_in_answer = ask_gpt(last_messages)
        # GPT: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        if not status_gpt:
            # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            bot.send_message(user_id, answer_gpt)
            return
        # —Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ + —Ç–æ–∫–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ GPT
        total_gpt_tokens += tokens_in_answer

        # –ë–î: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT –∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        full_gpt_message = [answer_gpt, 'assistant', total_gpt_tokens, 0, 0]
        add_message(user_id=user_id, full_message=full_gpt_message)

        bot.send_message(user_id, answer_gpt, reply_to_message_id=message.id)  # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç–æ–º
    except Exception as e:
        logging.error(e)  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ –ª–æ–≥–∏
        bot.send_message(message.from_user.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda: True)
def handler(message):
    bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É")


@bot.message_handler(content_types=['photo', 'video', 'document', 'sticker'])
def handle_non_text_message(message):
    bot.send_message(message.chat.id, "‚ùó –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä—ã.")


# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()
